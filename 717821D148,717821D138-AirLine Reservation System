/* AirLine Reservation System*/
package com.kce.bean;
public class Flight {
	  private int flightId;
	    private String sourceCity;
	    private String destinationCity;
	    private int availableSeats;
	    public Flight(int flightId, String sourceCity, String destinationCity, int availableSeats) {
	        this.flightId = flightId;
	        this.sourceCity = sourceCity;
	        this.destinationCity = destinationCity;
	        this.availableSeats = availableSeats;
	    }
	    public int getFlightId() {
	        return flightId;
	    }
	    public String getSourceCity() {
	        return sourceCity;
	    }
	    public String getDestinationCity() {
	        return destinationCity;
	    }
	    public int getAvailableSeats() {
	        return availableSeats;
	    }
	}
 package com.kce.dao;
	import java.sql.Connection;
	import java.sql.DriverManager;
	import java.sql.SQLException;
	public class DBconnection {
		    private static final String URL = "jdbc:mysql://localhost:3306/flight_reservation_system";
		    private static final String USERNAME = "root";
		    private static final String PASSWORD = "password";

		    public static Connection getConnection() {
		        try {
		            return DriverManager.getConnection(URL, USERNAME, PASSWORD);
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		        return null;
		    }
		}
  package com.kce.dao;
import java.beans.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import com.kce.util.FlightNotFoundException;
public class FlightDAO {
	  private Connection connection;
	    private PreparedStatement preparedStatement;
	    private Statement statement;

	    public FlightDAO() {
	        connection = DBconnection.getConnection();
	    }
	    public void displayAvailableFlights() throws FlightNotFoundException {
	        try {
	            statement = connection.createStatement();
	            ResultSet resultSet = statement.executeQuery("SELECT * FROM flights WHERE available_seats > 0");

	            while (resultSet.next()) {
	                System.out.println("Flight ID: " + resultSet.getInt("flight_id"));
	                System.out.println("Source: " + resultSet.getString("source_city"));
	                System.out.println("Destination: " + resultSet.getString("destination_city"));
	                System.out.println("Available Seats: " + resultSet.getInt("available_seats"));
	                System.out.println("--------------------");
	            }
	            resultSet.close();
	            statement.close();
	        } catch (SQLException e) {
	            throw new FlightNotFoundException("No available flights found.");
	        }
	    }
	    public void searchFlights(String sourceCity, String destinationCity) throws FlightNotFoundException {
	        try {
	            preparedStatement = connection.prepareStatement(
	                    "SELECT * FROM flights WHERE source_city = ? AND destination_city = ? AND available_seats > 0");
	            preparedStatement.setString(1, sourceCity);
	            preparedStatement.setString(2, destinationCity);
	            ResultSet resultSet = preparedStatement.executeQuery();
	            while (resultSet.next()) {
	                System.out.println("Flight ID: " + resultSet.getInt("flight_id"));
	                System.out.println("Source: " + resultSet.getString("source_city"));
	                System.out.println("Destination: " + resultSet.getString("destination_city"));
	                System.out.println("Available Seats: " + resultSet.getInt("available_seats"));
	                System.out.println("--------------------");
	            }
	            resultSet.close();
	            preparedStatement.close();
	        } catch (SQLException e) {
	            throw new FlightNotFoundException("No flights found for the given criteria.");
	        }}
	    public Flight getFlightById(int flightId) throws FlightNotFoundException {
	        try {
	            preparedStatement = connection.prepareStatement(
	                    "SELECT * FROM flights WHERE flight_id = ? AND available_seats > 0");
	            preparedStatement.setInt(1, flightId);
	            ResultSet resultSet = preparedStatement.executeQuery();

	            if (resultSet.next()) {
	                int availableSeats = resultSet.getInt("available_seats");
	                String sourceCity = resultSet.getString("source_city");
	                String destinationCity = resultSet.getString("destination_city");
	                return new Flight(flightId, sourceCity, destinationCity, availableSeats);
	            } else {
	                return null;
	            }
	        } catch (SQLException e) {
	            throw new FlightNotFoundException("Flight not found.");
	        }
	    }
	    public void bookFlight(Flight flight, String name, String contactNumber) throws FlightNotFoundException {
	        try {
	            connection.setAutoCommit(false);
	            preparedStatement = connection.prepareStatement(
	                    "INSERT INTO bookings (flight_id, name, contact_number) VALUES (?, ?, ?)");
	            preparedStatement.setInt(1, flight.getFlightId());
	            preparedStatement.setString(2, name);
	            preparedStatement.setString(3, contactNumber);
	            preparedStatement.executeUpdate();

	            preparedStatement = connection.prepareStatement(
	                    "UPDATE flights SET available_seats = available_seats - 1 WHERE flight_id = ?");
	            preparedStatement.setInt(1, flight.getFlightId());
	            preparedStatement.executeUpdate();
	            connection.commit();
	            connection.setAutoCommit(true);

	            preparedStatement.close();
	        } catch (SQLException e) {
	            try {
	                connection.rollback();
	            } catch (SQLException ex) {
	                ex.printStackTrace();
	            }
	            throw new FlightNotFoundException("Error occurred while booking the flight.");
	        } }
	    public void displayBookedFlights(String name, String contactNumber) throws FlightNotFoundException {
	        try {
	            preparedStatement = connection.prepareStatement(
	                    "SELECT * FROM bookings WHERE name = ? AND contact_number = ?");
	            preparedStatement.setString(1, name);
	            preparedStatement.setString(2, contactNumber);
	            ResultSet resultSet = preparedStatement.executeQuery();
	            while (resultSet.next()) {
	                System.out.println("Booking ID: " + resultSet.getInt("booking_id"));
	                System.out.println("Flight ID: " + resultSet.getInt("flight_id"));
	                System.out.println("Name: " + resultSet.getString("name"));
	                System.out.println("Contact Number: " + resultSet.getString("contact_number"));
	                System.out.println("--------------------");
	            }
	            resultSet.close();
	            preparedStatement.close();
	        } catch (SQLException e) {
	            throw new FlightNotFoundException("No bookings found for the given criteria.");
	        }}
	    public void modifyBooking(int bookingId, String newName, String newContactNumber) throws FlightNotFoundException {
	        try {
	            preparedStatement = connection.prepareStatement(
	                    "UPDATE bookings SET name = ?, contact_number = ? WHERE booking_id = ?");
	            preparedStatement.setString(1, newName);
	            preparedStatement.setString(2, newContactNumber);
	            preparedStatement.setInt(3, bookingId);
	            int rowsAffected = preparedStatement.executeUpdate();
	            if (rowsAffected == 0) {
	                throw new FlightNotFoundException("Booking not found or no changes made.");
	            }
	            preparedStatement.close();
	        } catch (SQLException e) {
	            throw new FlightNotFoundException("Error occurred while modifying the booking.");
	        }
	    }
	    public void cancelBooking(int bookingId) throws FlightNotFoundException {
	        try {
	            connection.setAutoCommit(false);
	            preparedStatement = connection.prepareStatement(
	                    "DELETE FROM bookings WHERE booking_id = ?");
	            preparedStatement.setInt(1, bookingId);
	            int rowsAffected = preparedStatement.executeUpdate();
	            if (rowsAffected == 0) {
	                throw new FlightNotFoundException("Booking not found.");
	            }
	            preparedStatement = connection.prepareStatement(
	                    "UPDATE flights SET available_seats = available_seats + 1 WHERE flight_id = " +
	                    "(SELECT flight_id FROM bookings WHERE booking_id = ?)");
	            preparedStatement.setInt(1, bookingId);
	            preparedStatement.executeUpdate();
	            connection.commit();
	            connection.setAutoCommit(true);
	            preparedStatement.close();
	        } catch (SQLException e) {
	            try {
	                connection.rollback();
	            } catch (SQLException ex) {
	                ex.printStackTrace();
	            }
	            throw new FlightNotFoundException("Error occurred while canceling the booking.");
	        }
	    }}}
package com.kce.service;
import com.kce.dao.FlightDAO;
import com.kce.util.*;
import java.util.Scanner;
import com.kce.bean.Flight;
public class ConsoleMenu {
	 private Scanner scanner;
	    private FlightDAO flightDAO;
	    public ConsoleMenu() {
	        scanner = new Scanner(System.in);
	        flightDAO = new FlightDAO();
	    }
	    public void displayMenu() {
	        boolean running = true;
	        while (running) {
	            System.out.println("Flight Reservation System");
	            System.out.println("1. View Available Flights");
	            System.out.println("2. Search for Flights");
	            System.out.println("3. Book a Flight");
	            System.out.println("4. Modify a Booking");
	            System.out.println("5. Cancel a Booking");
	            System.out.println("6. Exit");
	            System.out.print("Enter your choice: ");
	            int choice = scanner.nextInt();
	            scanner.nextLine(); 
	            switch (choice) {
	                case 1:
	                    viewAvailableFlights();
	                    break;
	                case 2:
	                    searchFlights();
	                    break;
	                case 3:
	                    bookFlight();
	                    break;
	                case 4:
	                    modifyBooking();
	                    break;
	                case 5:
	                    cancelBooking();
	                    break;
	                case 6:
	                    running = false;
	                    System.out.println("Exiting...");
	                    break;
	                default:
	                    System.out.println("Invalid choice. Please try again.");
	                    break;
	            }
	            System.out.println();
	        }}
	    private void viewAvailableFlights() {
	        System.out.println("Available Flights:");
	        try {
	            flightDAO.displayAvailableFlights();
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        } }
	    private void searchFlights() {
	        System.out.print("Enter source city: ");
	        String sourceCity = scanner.nextLine();
	        System.out.print("Enter destination city: ");
	        String destinationCity = scanner.nextLine();
	        System.out.println("Search Results:");
	        try {
	            flightDAO.searchFlights(sourceCity, destinationCity);
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        } }
	    private void bookFlight() {
	        System.out.print("Enter your name: ");
	        String name = scanner.nextLine();
	        System.out.print("Enter your contact number: ");
	        String contactNumber = scanner.nextLine();
	        System.out.print("Enter flight ID to book: ");
	        int flightId = scanner.nextInt();
	        scanner.nextLine();
	        try {
	            Flight flight = flightDAO.getFlightById(flightId);
	            if (flight != null) {
	                flightDAO.bookFlight(flight, name, contactNumber);
	                System.out.println("Flight booked successfully!");
	            } else {
	                System.out.println("Invalid flight ID or no available seats.");
	            }
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        }}
	    private void modifyBooking() {
	        System.out.print("Enter your name: ");
	        String name = scanner.nextLine();
	        System.out.print("Enter your contact number: ");
	        String contactNumber = scanner.nextLine();
	        System.out.println("Your Booked Flights:");
	        try {
	            flightDAO.displayBookedFlights(name, contactNumber);
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        }
	        System.out.print("Enter booking ID to modify: ");
	        int bookingId = scanner.nextInt();
	        scanner.nextLine(); 
	        System.out.println("Enter new details:");
	        System.out.print("Enter your name: ");
	        String newName = scanner.nextLine();
	        System.out.print("Enter your contact number: ");
	        String newContactNumber = scanner.nextLine();
	        try {
	            flightDAO.modifyBooking(bookingId, newName, newContactNumber);
	            System.out.println("Booking modified successfully!");
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        }}
	    private void cancelBooking() {
	        System.out.print("Enter your name: ");
	        String name = scanner.nextLine();
	        System.out.print("Enter your contact number: ");
	        String contactNumber = scanner.nextLine();
	        System.out.println("Your Booked Flights:");
	        try {
	            flightDAO.displayBookedFlights(name, contactNumber);
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        }
	        System.out.print("Enter booking ID to cancel: ");
	        int bookingId = scanner.nextInt();
	        scanner.nextLine(); 
	        try {
	            flightDAO.cancelBooking(bookingId);
	            System.out.println("Booking canceled successfully!");
	        } catch (FlightNotFoundException e) {
	            System.out.println(e.getMessage());
	        }
	    }}}
package com.kce.service;
public class Main {
	public static void main(String[] args) {
		ConsoleMenu cm = new ConsoleMenu();
		cm.displayMenu();
	}
}
package com.kce.util;
public class DBconnection {
}
package com.kce.util;
public class FlightNotFoundException {
	private static final long serialVersionUID = 1L;
	public FlightNotFoundException(String message) {
        super(message);
    }
}
